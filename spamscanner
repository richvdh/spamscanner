#!/usr/bin/env python
#
# Feeds false positive and negative spam through spamassassin's learner.
#
# For each folder for each user, first looks for a 'spam' subfolder, and
# if such exists, looks for mail which has appeared since the last run and
# which does not have the spam header set. Learns any such mail as spam, then
# flags it as deleted.
#
# Then looks through the main folder for new mail which does have the spam
# header set. Learns such mail as non-spam.
#
# If a permission error is returned when trying to select a folder, attempts
# to grant itself access rights on the folder and tries again. This will work
# fine provided the spamscanner user is configured as an admin user
# (/etc/imapd.conf/imap_admins)

from __future__ import print_function

import argparse
import imaplib
import pickle
import re
import socket
import sys
import traceback


class ImapRequestError(Exception):
    def __init__(self, rtype, data):
        super(ImapRequestError, self).__init__(
            "IMAP error: %r" % ((rtype, data),))

        # one of OK or NO, normally
        self.rtype = rtype

        # list of results from the command; each entry is either a
        # string, or a tuple. If a tuple, then the first part is the
        # header of the response, and the second part contains the data
        # (ie: 'literal' value).
        self.data = data


def check_response(response):
    """ Check the response from an imap operation

    Expects 'response' to be a (type, [data...]) result from an IMAP
    operation.

    If 'type' is not OK, throws an ImapRequestError with the result.

    Otherwise, returns the [data...] list.

    (imaplib checks for 'BAD' responses, but not 'NO' responses.)
    """
    if response[0] == 'OK':
        return response[1]
    raise ImapRequestError(*response)


class Scanner(object):
    def __init__(self, imap, state):
        self.imap = imap

        # state is a map from mailbox name to the starting point for the next
        # run (ie, one more than the last message we saw.)
        self.state = state

        # debug level
        self.debug = 0

        self.spam_header = ''
        self.spam_header_value = ''
        self.spamscanner_user = ''
        self.not_really = False
        self.delete_spam_after_report = False
        self.spamd_host_port = (None, None)

    def dbg(self, level, msg):
        if level > self.debug:
            return
        print(msg, file=sys.stderr)

    def process_mbox(self, mbox, user, isspam):
        self.dbg(
            1, 'processing %s folder %s for %s' % (
                'spam' if isspam else 'ham',
                mbox, user,
            )
        )

        self.select_mbox(
            mbox,
            allow_delete=(isspam and self.delete_spam_after_report),
        )
        uidstart = int(self.state.get(mbox, 0))

        # decide where we're going up to today
        uidnext_resp = self.imap.response('UIDNEXT')
        if uidnext_resp is None:
            raise Exception('no UIDNEXT in response from SELECT')
        uidnext = int(uidnext_resp[1][0])
        self.dbg(2, "range: [%i,%i)" % (uidstart, uidnext))

        if uidnext == uidstart:
            return

        # search for mail which has appeared since the last pass and whose
        # spam header does not match its current status (indicating that the
        # user has moved it).
        (v,) = check_response(self.imap.uid(
            "search", None,
            'UID', "%i:%i" % (uidstart, uidnext-1),
            'UNDELETED',
            'NOT' if isspam else None,
            'HEADER', self.spam_header, self.spam_header_value,
        ))

        if v != '':
            for uid in v.split(' '):
                self.fetch_and_report(mbox, uid, user, isspam)

        if not self.not_really:
            self.state[mbox] = uidnext

    def fetch_and_report(self, mbox, uid, user, isspam):
        """ fetch a message from the current mailbox and report it as ham/spam
        """
        msgclass = 'spam' if isspam else 'ham'
        self.dbg(
            0 if self.not_really else 1,
            "Reporting %s.%s as %s for %s" % (
                mbox, uid, msgclass, user),
        )
        if self.not_really:
            return

        msgs = check_response(self.imap.uid('fetch', uid, '(RFC822)'))
        msg = msgs[0][1]
        self.do_report(msgclass, user, msg)

        if isspam and self.delete_spam_after_report:
            self.delete_msg(uid)

    def delete_msg(self, msguid):
        """ Delete the given message from the current mailbox.
        """
        check_response(self.imap.uid('store', msguid, '+FLAGS', '(\\Deleted)'))

    def select_mbox(self, mbox, allow_delete=False):
        """ Select the given mailbox
        """

        # l: lookup (visible to LIST/SUBSCRIPGE)
        # r: read (SELECT/STATUS)
        # t: set deleted flag
        rights = '+lr'
        if allow_delete:
            rights += 't'

        self.do_or_setacl(
            mbox, rights,
            self.imap.select, mbox,
            readonly=not allow_delete,
        )

    def do_or_setacl(self, mbox, rights, func, *args, **kwargs):
        """Perform an operation, setting the ACL if it fails.

        Returns the data parts of an 'OK' response.
        """
        try:
            return check_response(func(*args, **kwargs))
        except imaplib.IMAP4.readonly:
            # flush the untagged response to shut imaplib up
            self.imap.response('READ-ONLY')
        except ImapRequestError as e:
            if e.rtype != 'NO':
                raise
            pass

        # permission error; try setting the ACL and try again
        self.dbg(0, "Setting acl on %s %s" % (mbox, rights))
        check_response(self.imap.setacl(mbox, self.spamscanner_user, rights))
        return check_response(func(*args, **kwargs))

    def do_report(self, msgclass, user, msg):
        """ send a message to spamd for learning
        """

        # strip CRs to work around
        # https://bz.apache.org/SpamAssassin/show_bug.cgi?id=5185#c30
        msg = msg.replace('\r', '')

        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect(self.spamd_host_port)
        hdr = (
            "TELL SPAMC/1.4\r\n"
            "Message-class: %s\r\n"
            "Set: local\r\n"
            "User: %s\r\n"
            "Content-length: %i\r\n"
            "\r\n"
            % (msgclass, user, len(msg)))

        sock.sendall(hdr)
        sock.sendall(msg)

        while True:
            data = sock.recv(1024)
            if data == '':
                break
            self.dbg(2, "<<< %s" % data)
        sock.close()


def unquote(f):
    """ strip quotes from a name
    """
    if f[0] != '"' or f[-1] != '"':
        return f
    return f[1:-1]


def parse_hostport(s, default_port=None):
    if s[-1] == ']':
        # ipv6 literal (with no port)
        return (s, default_port)

    out = s.rsplit(":", 1)
    if len(out) == 1:
        # No port
        port = default_port
    else:
        try:
            port = int(out[1])
        except ValueError:
            raise ValueError("Invalid host:port '%s'" % s)

    return (out[0], port)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument(
        '-S', '--imap-server', default='localhost',
        help="IMAP server.",
    )
    parser.add_argument(
        '-u', '--user', default='spamscanner',
        help="IMAP username.",
    )
    parser.add_argument(
        '-p', '--pass', dest='password', required=True,
        default=argparse.SUPPRESS,
        help='IMAP password',
    )
    parser.add_argument(
        '-d', '--debug', action='count',
        help="""Increase debug level. Give multiple times for more
        verbosity.""",
    )
    parser.add_argument(
        '--spamd-server', default='localhost',
        help="spamassassin daemon address.",
    )
    parser.add_argument(
        '-n', '--not-really', action='store_true',
        help=("don't actually report as spam/ham - just show what we would "
              "have done."),
    )
    parser.add_argument(
        '--no-delete-spam-after-report', action='store_true',
        help="""Normally messages found in the spam folder are marked as
        deleted after they are reported to spamassassin. This argument
        inhibits this behaviour.""")
    parser.add_argument(
        '--spam-header', default='X-Spam-Flag',
        metavar="HDR",
        help="""The name of the email header which indicates that a mail
        was scanned as spam at delivery time.""",
    )
    parser.add_argument(
        '--spam-header-value', default='yes',
        metavar="TEXT",
        help="""The text to match in the --spam-header which indicates that
        a mail was scanned as spam. This is matched case-insenstively and
        can appear anywhere in the header.""",
    )
    parser.add_argument(
        '--statefile', default='/var/lib/spamscanner/spamscanner.pickle',
        metavar="FILE",
        help="""A file where we store our state. It's not critical, but it
        saves us feeding the same messages through spamassassin every time we
        run, so is important for performance.""",
    )
    parser.add_argument(
        '--init', action='store_true',
        help="""initialise new state file. This should be used the first time
        the script is run, or if the statefile has got lost. It will mean we
        scan the whole of each mailbox, instead of starting from where we got
        to last time.""",
    )
    parser.add_argument(
        '--import-bdb-state', metavar='FILE',
        help='initialise new state from old bdb state file. Requires python 2.'
    )
    args = parser.parse_args()

    if args.import_bdb_state:
        import dbhash
        state = dict(dbhash.open(args.import_bdb_state))
    elif args.init:
        state = {}
    else:
        with open(args.statefile) as f:
            state = pickle.load(f)

    (host, port) = parse_hostport(args.imap_server, default_port=143)
    try:
        imap = imaplib.IMAP4(host, port)
    except Exception as e:
        print(
            "Unable to connect to imap server at %s:%d: %s" %
            (host, port, e),
            file=sys.stderr,
        )
        exit(1)

    imap.debug = args.debug
    imap.login(args.user, args.password)

    scanner = Scanner(imap, state)
    scanner.debug = args.debug
    scanner.spam_header = args.spam_header
    scanner.spam_header_value = args.spam_header_value
    scanner.spamscanner_user = args.user
    scanner.not_really = args.not_really
    scanner.delete_spam_after_report = not args.no_delete_spam_after_report
    scanner.spamd_host_port = parse_hostport(args.spamd_server,
                                             default_port=783)

    list_response_pattern = re.compile(
        r'\((.*)\) "(.*)" (.*)',
    )
    (r, data) = imap.list()
    for l in data:
        (flags, delim, folder) = list_response_pattern.match(l).groups()

        parts = unquote(folder).split(delim)

        # skip non-user folders
        if parts[0] != 'user':
            scanner.dbg(1, 'skipping folder %s' % folder)
            continue
        user = parts[1]
        isspam = parts[-1].lower() == 'spam'
        try:
            scanner.process_mbox(folder, user, isspam)
        except Exception as e:
            print(
                'Error processing %s:' % (folder, ),
                file=sys.stderr,
            )
            traceback.print_exc(e)
            break

    with open(args.statefile, "w") as f:
        pickle.dump(state, f)
